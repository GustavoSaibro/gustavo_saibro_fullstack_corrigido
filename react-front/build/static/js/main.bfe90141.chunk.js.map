{"version":3,"sources":["components/NumberComponent.js","Services/FatorialService.js","components/FatorialComponent.js","App.js","serviceWorker.js","index.js"],"names":["FatorialComponent","props","state","number","handleChange","bind","handleSubmit","event","this","setState","target","alert","preventDefault","axios","post","className","onSubmit","onChange","type","onClick","addFatorial","Component","get","fatorials","FatorialService","getFatorial","then","response","data","catch","error","console","log","NumberComponent","map","fatorial","key","id","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"4SAgEeA,E,kDAzDb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAEDC,MAAQ,CACXC,OAAQ,IAEV,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKC,aAAe,EAAKA,aAAaD,KAAlB,gBAPH,E,yDASNE,GACXC,KAAKC,SAAS,CAAEN,OAAQI,EAAMG,OAAOP,W,mCAE1BI,GACXI,MAAM,0BAA4BH,KAAKN,MAAMC,QAC7CI,EAAMK,mB,kCAGIT,GACVU,IAAMC,KArBoB,sCAqBQX,K,0CAIlCK,KAAKJ,aAAeI,KAAKJ,aAAaC,KAAKG,MAC3CA,KAAKF,aAAeE,KAAKF,aAAaD,KAAKG,Q,+BAI3C,OACE,yBAAKO,UAAU,OACb,yBAAKA,UAAU,eACb,0BACEC,SAAUR,KAAKF,aACfW,SAAUT,KAAKJ,aACfD,OAAQK,KAAKN,MAAMC,QAEnB,yBAAKY,UAAU,cACb,iEACA,2BACEG,KAAK,SACLH,UAAU,eACVE,SAAUT,KAAKJ,aACfD,OAAQK,KAAKN,MAAMC,SAErB,4BACEY,UAAU,kBACVI,QAASX,KAAKY,YAAYZ,KAAKL,SAFjC,qB,GA5CkBkB,aCGjB,M,sGAHX,OAAOR,IAAMS,IAJa,2C,MCwDftB,E,kDAnDb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACXqB,UAAW,IAHI,E,gEAOE,IAAD,OAIlBC,EAAgBC,cACbC,MAAK,SAACC,GACL,EAAKlB,SAAS,CAAEc,UAAWI,EAASC,UAErCC,OAAM,SAACC,GACNC,QAAQC,IAAIF,Q,+BAKhB,OACE,6BACE,yBAAKf,UAAU,aACb,mDACA,kBAACkB,EAAD,MACA,yBAAKlB,UAAU,OACb,wBAAIA,UAAU,eAAd,iBACA,2BAAOA,UAAU,uBACf,+BACE,4BACE,sCACA,0CAGJ,+BACGP,KAAKN,MAAMqB,UAAUW,KAAI,SAACC,GAAD,OACxB,wBAAIC,IAAKD,EAASE,IAChB,4BAAKF,EAAShC,QACd,4BAAKgC,EAASA,uB,GAxCFd,aCOjBiB,MARf,WACE,OACE,yBAAKvB,UAAU,OACb,kBAAC,EAAD,QCIcwB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBzB,MAAK,SAAA0B,GACJA,EAAaC,gBAEdxB,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAMwB,c","file":"static/js/main.bfe90141.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nimport axios from \"axios\";\r\n\r\nconst FATORIAL_REST_API_URL = \"http://localhost:8080/api/fatorials\";\r\n\r\nclass FatorialComponent extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      number: \"\",\r\n    };\r\n    this.handleChange = this.handleChange.bind(this);\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n  }\r\n  handleChange(event) {\r\n    this.setState({ number: event.target.number });\r\n  }\r\n  handleSubmit(event) {\r\n    alert(\"Um numero foi enviado: \" + this.state.number);\r\n    event.preventDefault();\r\n  }\r\n\r\n  addFatorial(number) {\r\n    axios.post(FATORIAL_REST_API_URL, number);\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.handleChange = this.handleChange.bind(this);\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"row\">\r\n        <div className=\"text-center\">\r\n          <form\r\n            onSubmit={this.handleSubmit}\r\n            onChange={this.handleChange}\r\n            number={this.state.number}\r\n          >\r\n            <div className=\"form-group\">\r\n              <label>Calculate your fatorial here: </label>\r\n              <input\r\n                type=\"number\"\r\n                className=\"form-control\"\r\n                onChange={this.handleChange}\r\n                number={this.state.number}\r\n              ></input>\r\n              <button\r\n                className=\"btn btn-primary\"\r\n                onClick={this.addFatorial(this.number)}\r\n              >\r\n                calculate\r\n              </button>\r\n            </div>\r\n          </form>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default FatorialComponent;\r\n","import axios from \"axios\";\r\n\r\nconst FATORIAL_REST_API_URL = \"http://localhost:8080/api/fatorials\";\r\n\r\nclass FatorialService {\r\n  getFatorial() {\r\n    return axios.get(FATORIAL_REST_API_URL);\r\n  }\r\n}\r\nexport default new FatorialService();\r\n","import React, { Component } from \"react\";\r\n//import axios from \"axios\";\r\nimport NumberComponent from \"./NumberComponent\";\r\nimport FatorialService from \"../Services/FatorialService\";\r\n//const FATORIAL_REST_API_URL = \"http://localhost:8080/api/fatorials\";\r\n\r\nclass FatorialComponent extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      fatorials: [],\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    // axios.get(FATORIAL_REST_API_URL).then((response) => {\r\n    //   this.setState({ fatorials: response.data });\r\n    // });\r\n    FatorialService.getFatorial()\r\n      .then((response) => {\r\n        this.setState({ fatorials: response.data });\r\n      })\r\n      .catch((error) => {\r\n        console.log(error);\r\n      });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <div className=\"container\">\r\n          <h1>Fatorial Calculator</h1>\r\n          <NumberComponent />\r\n          <div className=\"row\">\r\n            <h2 className=\"text-center\">Fatorial List</h2>\r\n            <table className=\"table table-striped\">\r\n              <thead>\r\n                <tr>\r\n                  <td>Number</td>\r\n                  <td>Fatorial</td>\r\n                </tr>\r\n              </thead>\r\n              <tbody>\r\n                {this.state.fatorials.map((fatorial) => (\r\n                  <tr key={fatorial.id}>\r\n                    <td>{fatorial.number}</td>\r\n                    <td>{fatorial.fatorial}</td>\r\n                  </tr>\r\n                ))}\r\n              </tbody>\r\n            </table>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default FatorialComponent;\r\n","import React from \"react\";\nimport \"./App.css\";\nimport FatorialComponent from \"./components/FatorialComponent\";\n//import NumberComponent from \"./components/NumberComponent\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <FatorialComponent />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}